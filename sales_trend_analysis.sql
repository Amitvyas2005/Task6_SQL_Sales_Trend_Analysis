create database sales_trend_analysis;
use sales_trend_analysis;
-- importing data using import wizard table name as Orders
-- checking data is successfully loaded
Select * from orders;
-- checking null values
SELECT 
    SUM(CASE WHEN order_date IS NULL THEN 1 ELSE 0 END) AS null_order_date,
    SUM(CASE WHEN product_id IS NULL THEN 1 ELSE 0 END) AS null_product_id,
    SUM(CASE WHEN quantity IS NULL THEN 1 ELSE 0 END) AS null_quantity,
    SUM(CASE WHEN price IS NULL THEN 1 ELSE 0 END) AS null_price
FROM 
    orders;
-- Detect duplicate full rows
SELECT 
    order_date, product_id, quantity, price, 
    COUNT(*) AS duplicate_count
FROM 
    orders
GROUP BY 
    order_date, product_id, quantity, price
HAVING 
    COUNT(*) > 1;
-- Add a new column 'amount' as revenue
SELECT 
    *, 
    quantity * price AS amount
FROM 
    orders;
-- Extracted a  year and month from order_date
SELECT order_date,
       YEAR(STR_TO_DATE(order_date, '%m/%d/%Y')) AS year,
       MONTH(STR_TO_DATE(order_date, '%m/%d/%Y')) AS month
FROM orders;
SELECT
    YEAR(STR_TO_DATE(order_date, '%m/%d/%Y')) AS year,
    MONTH(STR_TO_DATE(order_date, '%m/%d/%Y')) AS month,
    SUM(quantity * price) AS total_revenue,
    COUNT(DISTINCT CONCAT(order_date, '-', product_id)) AS order_volume
FROM 
    orders
GROUP BY 
    year, month
ORDER BY 
    year, month;
-- Overall revenue
SELECT 
    SUM(quantity * price) AS total_revenue
FROM 
    orders;
-- Count of orders per product
SELECT 
    product_id,
    COUNT(*) AS order_count
FROM 
    orders
GROUP BY 
    product_id
ORDER BY 
    order_count DESC;
-- Revenue generated by each product
SELECT 
    product_id,
    SUM(quantity * price) AS revenue
FROM 
    orders
GROUP BY 
    product_id
ORDER BY 
    revenue DESC;
-- Find the best-performing months
SELECT 
    DATE_FORMAT(STR_TO_DATE(order_date, '%m/%d/%Y'), '%Y-%m') AS month,
    SUM(quantity * price) AS revenue
FROM 
    orders
GROUP BY 
    DATE_FORMAT(STR_TO_DATE(order_date, '%m/%d/%Y'), '%Y-%m')
ORDER BY 
    revenue DESC
LIMIT 3;
-- Monthly AOV (average order value) 
SELECT
    YEAR(STR_TO_DATE(order_date, '%m/%d/%Y')) AS year,
    MONTH(STR_TO_DATE(order_date, '%m/%d/%Y')) AS month,
    AVG(quantity * price) AS avg_order_value
FROM 
    orders
GROUP BY 
    year, month
ORDER BY 
    year, month;
-- items sold each month
SELECT
    YEAR(STR_TO_DATE(order_date, '%m/%d/%Y')) AS year,
    MONTH(STR_TO_DATE(order_date, '%m/%d/%Y')) AS month,
    SUM(quantity) AS total_quantity
FROM 
    orders
GROUP BY 
    year, month
ORDER BY 
    year, month;
-- Top earning product id
SELECT 
    product_id,
    SUM(quantity * price) AS revenue
FROM 
    orders
GROUP BY 
    product_id
ORDER BY 
    revenue DESC
LIMIT 1;




    




